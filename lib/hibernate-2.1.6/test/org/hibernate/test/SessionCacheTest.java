//$Id: SessionCacheTest.java,v 1.7 2004/07/23 15:21:47 steveebersole Exp $package org.hibernate.test;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;import net.sf.hibernate.HibernateException;import net.sf.hibernate.Session;import net.sf.hibernate.ObjectNotFoundException;import java.sql.SQLException;import java.util.Date;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class SessionCacheTest extends TestCase {	private Log log = LogFactory.getLog(SessionCacheTest.class);	public SessionCacheTest(String testName) {		super(testName);	}	protected String[] getMappings() {		return new String[] {			"Simple.hbm.xml"		};	}	public static Test suite() {		return new TestSuite(SessionCacheTest.class);	}	public static void main(String[] args) throws Exception {		TestRunner.run( suite() );	}	public void testLoadAfterNonExists() throws HibernateException, SQLException {		Session fixture = openSession();		// First, prime the fixture session to think the entity does not exist		try {			fixture.load( Simple.class, new Long(-1) );		}		catch(ObjectNotFoundException onfe) {			// this is correct		}		// Next, lets create that entity under the covers		Session anotherSession = null;		try {			anotherSession = getSessions().openSession();			Simple myNewSimple = new Simple();			myNewSimple.setName("My under the radar Simple entity");			myNewSimple.setAddress("SessionCacheTest.testLoadAfterNonExists");			myNewSimple.setCount(1);			myNewSimple.setDate( new Date() );			myNewSimple.setPay( new Float(100000000) );			anotherSession.save( myNewSimple, new Long(-1) );			anotherSession.flush();			anotherSession.connection().commit();		}		finally {			quietlyClose(anotherSession);		}		// Verify that the original session is still unable to see the new entry...		try {			fixture.load( Simple.class, new Long(-1) );		}		catch(ObjectNotFoundException onfe) {		}		// Now, lets clear the original session at which point it should be able to see		// the new entity		fixture.clear();		try {			Simple dummy = (Simple) fixture.load( Simple.class, new Long(-1) );			assertNotNull("Unable to locate entity Simple with id = -1", dummy);		}		catch(ObjectNotFoundException onfe) {			fail("Unable to locate entity Simple with id = -1");		}		fixture.close();	}	private void quietlyClose(Session session) {		if (session != null) {			try {				session.close();			}			catch(Throwable t) {			}		}	}}